{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger QRBWS",
    "description": "API of QRBWS",
    "termsOfService": "https://github.com/felansu/QRBWS/blob/master/README.md",
    "contact": {
      "name": "Ferran Gonzalez Alonso",
      "url": "https://github.com/felansu/QRBWS/",
      "email": "gaferran@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/author/": {
      "get": {
        "tags": [
          "author"
        ],
        "operationId": "list",
        "description": "Returns all authors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of authors.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Author"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "author"
        ],
        "summary": "Create",
        "description": "Create an author",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "author",
            "description": "Author object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Author"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/author/{authorId}": {
      "get": {
        "tags": [
          "author"
        ],
        "summary": "Get an author",
        "description": "For valid response an author with authorId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "authorId",
            "description": "Author id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "author"
        ],
        "summary": "Delete an author",
        "description": "For valid response an author with authorId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "authorId",
            "description": "Author id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "author"
        ],
        "summary": "Update",
        "description": "Update an author",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "author",
            "description": "Author object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Author"
              }
            }
          },
          {
            "in": "path",
            "name": "authorId",
            "description": "Author id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/book/": {
      "get": {
        "tags": [
          "book"
        ],
        "operationId": "list",
        "description": "Returns all books",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of books.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "book"
        ],
        "summary": "Create",
        "description": "Create an book",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "book",
            "description": "Book object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/book/{bookId}": {
      "get": {
        "tags": [
          "book"
        ],
        "summary": "Get an book",
        "description": "For valid response an book with bookId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "description": "Book id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "book"
        ],
        "summary": "Delete an book",
        "description": "For valid response an book with bookId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "description": "Book id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "book"
        ],
        "summary": "Update",
        "description": "Update an book",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "book",
            "description": "Book object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Book"
              }
            }
          },
          {
            "in": "path",
            "name": "bookId",
            "description": "Book id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/category/": {
      "get": {
        "tags": [
          "category"
        ],
        "operationId": "list",
        "description": "Returns all categories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "category"
        ],
        "summary": "Create",
        "description": "Create an category",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "category",
            "description": "Category object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/category/{categoryId}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get an category",
        "description": "For valid response an category with categoryId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Category id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "category"
        ],
        "summary": "Delete an category",
        "description": "For valid response an category with categoryId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "categoryId",
            "description": "Category id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "category"
        ],
        "summary": "Update",
        "description": "Update an category",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "category",
            "description": "Category object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Category"
              }
            }
          },
          {
            "in": "path",
            "name": "categoryId",
            "description": "Author id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/comment/": {
      "get": {
        "tags": [
          "comment"
        ],
        "operationId": "list",
        "description": "Returns all categories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "comment"
        ],
        "summary": "Create",
        "description": "Create an comment",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "comment",
            "description": "Comment object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/comment/{commentId}": {
      "get": {
        "tags": [
          "comment"
        ],
        "summary": "Get an comment",
        "description": "For valid response an comment with commentId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "description": "Comment id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "comment"
        ],
        "summary": "Delete an comment",
        "description": "For valid response an comment with commentId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "description": "Comment id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "comment"
        ],
        "summary": "Update",
        "description": "Update an comment",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "comment",
            "description": "Comment object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "Author id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/employee/": {
      "get": {
        "tags": [
          "employee"
        ],
        "operationId": "list",
        "description": "Returns all categories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "employee"
        ],
        "summary": "Create",
        "description": "Create an employee",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "employee",
            "description": "Comment object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/employee/{employeeId}": {
      "get": {
        "tags": [
          "employee"
        ],
        "summary": "Get an employee",
        "description": "For valid response an employee with employeeId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "employeeId",
            "description": "Comment id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "employee"
        ],
        "summary": "Delete an employee",
        "description": "For valid response an employee with employeeId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "employeeId",
            "description": "Comment id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "employee"
        ],
        "summary": "Update",
        "description": "Update an employee",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "employee",
            "description": "Comment object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          {
            "in": "path",
            "name": "employeeId",
            "description": "Author id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/holiday/": {
      "get": {
        "tags": [
          "holiday"
        ],
        "operationId": "list",
        "description": "Returns all categories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "holiday"
        ],
        "summary": "Create",
        "description": "Create an holiday",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "holiday",
            "description": "Comment object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/holiday/{holidayId}": {
      "get": {
        "tags": [
          "holiday"
        ],
        "summary": "Get an holiday",
        "description": "For valid response an holiday with holidayId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "holidayId",
            "description": "Comment id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "holiday"
        ],
        "summary": "Delete an holiday",
        "description": "For valid response an holiday with holidayId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "holidayId",
            "description": "Comment id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "holiday"
        ],
        "summary": "Update",
        "description": "Update an holiday",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "holiday",
            "description": "Comment object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Comment"
              }
            }
          },
          {
            "in": "path",
            "name": "holidayId",
            "description": "Author id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/idiom/": {
      "get": {
        "tags": [
          "idiom"
        ],
        "operationId": "list",
        "description": "Returns all categories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of categories.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Idiom"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "idiom"
        ],
        "summary": "Create",
        "description": "Create an idiom",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "idiom",
            "description": "Idiom object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Idiom"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/idiom/{idiomId}": {
      "get": {
        "tags": [
          "idiom"
        ],
        "summary": "Get an idiom",
        "description": "For valid response an idiom with idiomId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "idiomId",
            "description": "Idiom id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "idiom"
        ],
        "summary": "Delete an idiom",
        "description": "For valid response an idiom with idiomId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "idiomId",
            "description": "Author id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "idiom"
        ],
        "summary": "Update",
        "description": "Update an idiom",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "idiom",
            "description": "Idiom object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Idiom"
              }
            }
          },
          {
            "in": "path",
            "name": "idiomId",
            "description": "Idiom id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/lending/": {
      "get": {
        "tags": [
          "lending"
        ],
        "operationId": "list",
        "description": "Returns all lendings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of lendings.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/lending"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "lending"
        ],
        "summary": "Lend",
        "description": "Lend a book",
        "operationId": "lend",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "lending",
            "description": "lending object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/lending"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/lending/{lendingId}": {
      "get": {
        "tags": [
          "lending"
        ],
        "summary": "Get an lending",
        "description": "For valid response an lending with lendingId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "lendingId",
            "description": "lending id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "lending"
        ],
        "summary": "Delete an lending",
        "description": "For valid response an lending with lendingId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "lendingId",
            "description": "lending id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "lending"
        ],
        "summary": "Update",
        "description": "Update an lending",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "lending",
            "description": "lending object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/lending"
              }
            }
          },
          {
            "in": "path",
            "name": "lendingId",
            "description": "lending id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/stock/": {
      "get": {
        "tags": [
          "stock"
        ],
        "operationId": "list",
        "description": "Returns all stock",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of stock.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Stock"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "stock"
        ],
        "summary": "Create",
        "description": "Create an stock",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "stock",
            "description": "Stock object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Stock"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/stock/{stockId}": {
      "get": {
        "tags": [
          "stock"
        ],
        "summary": "Get an stock",
        "description": "For valid response an stock with stockId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stockId",
            "description": "Stock id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "stock"
        ],
        "summary": "Delete an stock",
        "description": "For valid response an stock with stockId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "stockId",
            "description": "Stock id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "stock"
        ],
        "summary": "Update",
        "description": "Update an stock",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "stock",
            "description": "Stock object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Stock"
              }
            }
          },
          {
            "in": "path",
            "name": "stockId",
            "description": "Stock id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/student/": {
      "get": {
        "tags": [
          "student"
        ],
        "operationId": "list",
        "description": "Returns all students",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of students.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Student"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "student"
        ],
        "summary": "Create",
        "description": "Create an student",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "student",
            "description": "Student object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Student"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/student/{studentId}": {
      "get": {
        "tags": [
          "student"
        ],
        "summary": "Get an student",
        "description": "For valid response an student with studentId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "studentId",
            "description": "Student id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "student"
        ],
        "summary": "Delete an student",
        "description": "For valid response an student with studentId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "studentId",
            "description": "Student id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "student"
        ],
        "summary": "Update",
        "description": "Update an student",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "student",
            "description": "Student object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Student"
              }
            }
          },
          {
            "in": "path",
            "name": "studentId",
            "description": "Student id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/userAccount/": {
      "get": {
        "tags": [
          "userAccount"
        ],
        "operationId": "list",
        "description": "Returns all userAccounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number to list",
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset from the first result to list from",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "A list of userAccounts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/userAccount"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "userAccount"
        ],
        "summary": "Create",
        "description": "Create an userAccount",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userAccount",
            "description": "userAccount object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/userAccount"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/userAccount/{userAccountId}": {
      "get": {
        "tags": [
          "userAccount"
        ],
        "summary": "Get an userAccount",
        "description": "For valid response an userAccount with userAccountId param should be exist",
        "operationId": "getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userAccountId",
            "description": "userAccount id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "userAccount"
        ],
        "summary": "Delete an userAccount",
        "description": "For valid response an userAccount with userAccountId param should be exist",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userAccountId",
            "description": "userAccount id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "put": {
        "tags": [
          "userAccount"
        ],
        "summary": "Update",
        "description": "Update an userAccount",
        "operationId": "update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userAccount",
            "description": "userAccount object",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/userAccount"
              }
            }
          },
          {
            "in": "path",
            "name": "userAccountId",
            "description": "userAccount id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid params supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Author": {
      "type": "object",
      "required": [
        "id",
        "name",
        "notes"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "books": {
          "type": "array",
          "items": {
            "$ref": "Book"
          }
        }
      }
    },
    "Book": {
      "type": "object",
      "required": [
        "id",
        "isbn",
        "title"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isbn": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "synopsis": {
          "type": "string"
        },
        "pages": {
          "type": "integer",
          "format": "int32"
        },
        "idiom": {
          "$ref": "Idiom"
        },
        "category": {
          "$ref": "Category"
        },
        "authors": {
          "type": "array",
          "items": {
            "$ref": "Author"
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "Comment"
          }
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "id",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Comment": {
      "type": "object",
      "required": [
        "id",
        "avaliation",
        "userAccount"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "avaliation": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "dataCreated": {
          "type": "date",
          "format": "date"
        },
        "recommendation": {
          "type": "boolean",
          "format": "boolean"
        },
        "userAccount": {
          "$ref": "UserAccount"
        }
      }
    },
    "Employee": {
      "allOf": [
        {
          "$ref": "#/definitions/Person"
        },
        {
          "type": "object",
          "required": [
            "code"
          ],
          "properties": {
            "code": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Holiday": {
      "type": "object",
      "required": [
        "id",
        "description",
        "startDate",
        "finalDate"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "startDate": {
          "type": "date",
          "format": "date"
        },
        "finalDate": {
          "type": "date",
          "format": "date"
        }
      }
    },
    "Idiom": {
      "type": "object",
      "required": [
        "id",
        "description"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Lending": {
      "type": "object",
      "required": [
        "id",
        "userAccount",
        "book"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "dateOut": {
          "type": "date",
          "format": "date"
        },
        "dateIn": {
          "type": "date",
          "format": "date"
        },
        "returned": {
          "type": "boolean",
          "format": "boolean"
        },
        "avised": {
          "type": "boolean",
          "format": "boolean"
        },
        "userAccount": {
          "$ref": "UserAccount"
        },
        "book": {
          "$ref": "Book"
        }
      }
    },
    "Person": {
      "type": "object",
      "required": [
        "name",
        "email"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "Stock": {
      "type": "object",
      "required": [
        "id",
        "book",
        "availableBalance"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "book": {
          "$ref": "Book"
        },
        "availableBalance": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Student": {
      "allOf": [
        {
          "$ref": "#/definitions/Person"
        },
        {
          "type": "object",
          "required": [
            "enrollment"
          ],
          "properties": {
            "enrollment": {
              "type": "string"
            }
          }
        }
      ]
    },
    "UserAccount": {
      "type": "object",
      "required": [
        "id",
        "login",
        "password",
        "person"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "login": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "person": {
          "$ref": "Person"
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    }
  }
}